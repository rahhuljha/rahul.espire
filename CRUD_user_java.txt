<<project
    xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>net.javaguides.hibernate</groupId>
        <artifactId>hibernate-tutorial</artifactId>
        <version>0.0.1-SNAPSHOT</version>
    </parent>
    <artifactId>jpa-crud-example</artifactId>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>
    <dependencies>
        <!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.13</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.hibernate/hibernate-core -->
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-core</artifactId>
            <version>5.3.7.Final</version>
        </dependency>
    </dependencies>
    <build>
        <sourceDirectory>src/main/java</sourceDirectory>
        <plugins>
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.5.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>














package net.javaguides.hibernate.entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

@Entity
@Table(name = "USER")
public class User{

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    private int userid;

    @Column(name = "username")
    private String username;
 @Column(name = "gender")
    private String gender;
@Column(name = "address")
    private String address;

@Column(name = "phone_number")
    private String phonenumber;

@Column(name = "passtype")
    private String passtype;
@Column(name = "validity")
    private bool validity;
   

   

    public Student(int userid String username, String gender, String address,String phonenumber,String passtype,bool validity) {
this.userid=userid;
        this.username = userame;
        this.gender = gender;
        this.address= address;
 this.phonenumber= number;
this.passtype= passtype;
this.passtype= passtype;
this.validity=validity;

    }

    public int getuserId() {
        return userid;
    }

    public void setuserId(int userid) {
        this.userid = userid;
    }

    public String getgender() {
        return gender;
    }

 public void setgender(String gender) {
        this.gender = gender;
    }

 public String getaddress() {
        return address;
    }

    public void setaddress(String address) {
        this.address = address;
    }

    public String getphonenumber() {
        return phonenumber;
    }

    public void setphonenumber(String phonenumber) {
        this.phonenumber= phonenumber;
    }

    public bool getvalidity() {
        return validity;
    }

    public void setvalidity(String validity) {
        this.validity = validity;
    }

 

    @Override
    public String toString() {
        return "Student [userid=" + userid + ", username=" + username + ", phonenumber=" + phonenumber+ ", gender=" + gender",+ address=" + address",+ validity=" + validity",+ passtype=" + passtype"]";
    }
}





package net.javaguides.hibernate;

import javax.persistence.EntityManager;
import javax.persistence.EntityTransaction;

import net.javaguides.hibernate.entity.Student;
import net.javaguides.hibernate.util.JPAUtil;

/**
 *  JPA CRUD Operations
 * @author Ramesh Fadatare
 *
 */
public class CRUDOperations {
    public void insertEntity() {
        EntityManager entityManager = JPAUtil.getEntityManagerFactory().createEntityManager();
        EntityTransaction entityTransaction = entityManager.getTransaction();
        entityTransaction.begin();
        User user = new User(123, "rahul kumar", "male","dhdhdhdhdhdhdhhhh","bolero",true);
        entityManager.persist(user);
        entityManager.getTransaction().commit();
        entityManager.close();
    }

    public void findEntity() {
        EntityManager entityManager = JPAUtil.getEntityManagerFactory().createEntityManager();
        entityManager.getTransaction().begin();
        User user = entityManager.find(User.class, 1);
        System.out.println("user id :: " + user.getuserId());
        System.out.println("user name :: " + user.getusername());
        System.out.println("gender :: " + user.getgender());
        System.out.println("address :: " + user.getaddress());
 System.out.println("phone nunmber:: " + user.getphonenumber());
 System.out.println("pass type:: " + user.getpasstype());
System.out.println("validity:: " + user.getvalidity());
        entityManager.getTransaction().commit();
        entityManager.close();
    }

    public void updateEntity() {
        EntityManager entityManager = JPAUtil.getEntityManagerFactory().createEntityManager();
        entityManager.getTransaction().begin();

        Student student = entityManager.find(User.class, 1);
 System.out.println("user id :: " + user.getuserId());
        System.out.println("user name :: " + user.getusername());
        System.out.println("gender :: " + user.getgender());
        System.out.println("address :: " + user.getaddress());
 System.out.println("phone nunmber:: " + user.getphonenumber());
 System.out.println("pass type:: " + user.getpasstype());
System.out.println("validity:: " + user.getvalidity());
       

        // The entity object is physically updated in the database when the transaction
        // is committed
        student.setusername("hdhdhdh");
        student.gender("muzaffarpur");
        entityManager.getTransaction().commit();
        entityManager.close();
    }

    public void removeEntity() {
        EntityManager entityManager = JPAUtil.getEntityManagerFactory().createEntityManager();
        entityManager.getTransaction().begin();

        Book book = entityManager.find(User.class, 1);
System.out.println("user id :: " + user.getuserId());
        System.out.println("user name :: " + user.getusername());
        System.out.println("gender :: " + user.getgender());
        System.out.println("address :: " + user.getaddress());
 System.out.println("phone nunmber:: " + user.getphonenumber());
 System.out.println("pass type:: " + user.getpasstype());
System.out.println("validity:: " + user.getvalidity());
       
        entityManager.getTransaction().commit();
        entityManager.close();
    }



<persistence
    xmlns="http://xmlns.jcp.org/xml/ns/persistence"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence
             http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd"
 version="2.1">
    <persistence-unit name="PERSISTENCE">
        <description> Hibernate JPA Configuration Example</description>
        <provider>org.hibernate.jpa.HibernatePersistenceProvider</provider>
        <class>net.javaguides.hibernate.entity.Student</class>
        <properties>
            <property name="javax.persistence.jdbc.driver"
    value="com.mysql.cj.jdbc.Driver" />
            <property name="javax.persistence.jdbc.url"
    value="jdbc:mysql://localhost:3306/hibernate_db" />
            <property name="javax.persistence.jdbc.user" value="root" />
            <property name="javax.persistence.jdbc.password"
    value="root" />
            <property name="hibernate.show_sql" value="true" />
            <property name="hibernate.hbm2ddl.auto" value="create-drop" />
        </properties>
    </persistence-unit>
</persistenc>

